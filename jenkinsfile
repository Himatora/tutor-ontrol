pipeline {
    agent any

    environment {
        CMD = 'C:\\Windows\\System32\\cmd.exe'
        PM2_CMD = 'C:\\Users\\User\\node_modules\\.bin\\pm2.cmd'
        PYTHON_EXE = 'C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python313\\python.exe'
        SERVER_DIR = 'C:\\Users\\User\\Desktop\\jenkins\\tutor-ontrol_server'
        WORK_DIR = 'C:\\Users\\User\\Desktop\\jenkins\\tutor-ontrol'
    }

    triggers { 
        githubPush() 
    }

    stages {
        stage('Pull Latest Changes') {
            steps {
                withCredentials([
                    usernamePassword(credentialsId: 'github-creds', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN'),
                    string(credentialsId: 'github-email', variable: 'GIT_EMAIL')
                ]) {
                    bat """
                        cd "${WORK_DIR}"
                        git config user.name "%GIT_USER%"
                        git config user.email "%GIT_EMAIL%"
                        
                        git fetch origin
                        git checkout fix
                        git pull origin fix
                        
                        :: Копируем изменения в серверную папку
                        xcopy "${WORK_DIR}\\*" "${SERVER_DIR}\\" /E /Y /I
                    """
                }
            }
        }

        stage('Start Backend Server') {
            steps {
                bat """
                    cd "${SERVER_DIR}"

                    call "${PM2_CMD}" delete django || echo No existing Django process

                    call "${PM2_CMD}" start "${PYTHON_EXE}" --name django -- manage.py runserver 127.0.0.1:8000
                """
            }
        }

        stage('Start Frontend Server') {
            steps {
                bat """
                    cd "${SERVER_DIR}\\client"

                    call "${PM2_CMD}" delete vue || echo No existing Vue process

                    call "${PM2_CMD}" start "${CMD}" --name vue -- /c "cd ${SERVER_DIR}\\client && npm run dev"

                    echo Frontend started in background via PM2
                """
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    try {
                        // Запуск Django тестов
                        bat """
                            cd "${SERVER_DIR}"
                            "${PYTHON_EXE}" manage.py test
                        """
                        echo "All Django tests passed! Keeping servers running."
                    } catch (err) {
                        // Если тесты провалились - останавливаем серверы
                        echo "Tests failed! Stopping servers..."
                        bat """
                            "${PM2_CMD}" delete django || echo No Django process to delete
                            "${PM2_CMD}" delete vue || echo No Vue process to delete
                        """
                        error("Django tests failed. Servers stopped.")
                    }
                 }
            }
        }

        stage('Merge fix into main and sync') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                withCredentials([
                    usernamePassword(credentialsId: 'github-creds', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN'),
                    string(credentialsId: 'github-email', variable: 'GIT_EMAIL')
                ]) {
                    bat """
                        cd "${WORK_DIR}"
                        
                        :: Настраиваем git
                        git config user.name "%GIT_USER%"
                        git config user.email "%GIT_EMAIL%"

                        :: Переключаемся на main и обновляем
                        git checkout main
                        git pull origin main

                        :: Мержим fix в main
                        git merge fix --no-ff -m "Merge fix branch [Jenkins Build: ${BUILD_NUMBER}]"

                        :: Пушим изменения в main
                        git push origin main

                        :: Синхронизируем fix с main
                        git checkout fix
                        git merge main --no-edit

                        :: Пушим обновленный fix
                        git push origin fix

                        :: Копируем финальную версию в серверную папку
                        xcopy "${WORK_DIR}\\*" "${SERVER_DIR}\\" /E /Y /I
                    """
                }
            }
        }

        stage('Restart Servers') {
            steps {
                bat """
                    :: Перезапускаем бекенд
                    cd "${SERVER_DIR}"
                    call "${PM2_CMD}" delete django || echo No Django process
                    call "${PM2_CMD}" start "${PYTHON_EXE}" --name django -- manage.py runserver 127.0.0.1:8000

                    :: Перезапускаем фронтенд
                    cd "${SERVER_DIR}\\client"
                    call "${PM2_CMD}" delete vue || echo No Vue process
                    call "${PM2_CMD}" start "${CMD}" --name vue -- /c "cd ${SERVER_DIR}\\client && npm run dev"

                    echo "Servers restarted with latest changes"
                """
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully!"
            echo "Backend: http://127.0.0.1:8000/"
            echo "Frontend: http://localhost:5173/"
            echo "Changes are live and merged to main branch"
        }
        failure {
            echo "Pipeline failed! Check the logs above."
        }
    }
}