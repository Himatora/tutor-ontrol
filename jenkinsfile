pipeline {
    agent any

    environment {
        CMD = 'C:\\Windows\\System32\\cmd.exe'
        PM2_CMD = 'C:\\Users\\User\\node_modules\\.bin\\pm2.cmd'
        PYTHON_EXE = 'C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python313\\python.exe'
        TARGET_DIR = 'C:\\Users\\User\\Desktop\\jenkins\\tutor-ontrol_server'
        GIT_REPO_URL = 'https://github.com/Himatora/tutor-ontrol.git'
    }

    triggers { 
        githubPush() 
    }

    stages {
        stage('Clean Workspace and Setup') {
            steps {
                bat """
                    echo "Cleaning workspace and setting up environment..."
                    cd "${TARGET_DIR}"
                    
                    echo "Current directory:"
                    cd
                    
                    echo "Git status before operations:"
                    git status || echo "Git not initialized"
                    
                    echo "PM2 processes before start:"
                    "${PM2_CMD}" list || echo "PM2 not running"
                    
                    echo "=== BRANCH DETECTION ==="
                    git branch --show-current
                    git log -1 --oneline
                """
            }
        }

        stage('Start Backend Server') {
            steps {
                bat """
                    cd "${TARGET_DIR}"

                    echo "Stopping existing Django processes..."
                    "${PM2_CMD}" delete django || echo "No existing Django process found"

                    echo "Starting Django server..."
                    "${PM2_CMD}" start "${PYTHON_EXE}" --name django -- manage.py runserver 127.0.0.1:8000
                    
                    echo "Checking if Django started..."
                    "${PM2_CMD}" list
                    timeout 10 || echo "Timeout check complete"
                """
            }
        }

        stage('Start Frontend Server') {
            steps {
                bat """
                    cd "${TARGET_DIR}\\client"

                    echo "Stopping existing Vue processes..."
                    "${PM2_CMD}" delete vue || echo "No existing Vue process found"

                    echo "Starting Vue development server..."
                    "${PM2_CMD}" start "${CMD}" --name vue -- /c "cd ${TARGET_DIR}\\client && npm run dev"

                    echo "Frontend started in background via PM2"
                    "${PM2_CMD}" list
                """
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    try {
                        echo "Running Django tests..."
                        bat """
                            cd "${TARGET_DIR}"
                            "${PYTHON_EXE}" manage.py test --verbosity=2
                        """
                        echo "‚úÖ All Django tests passed! Keeping servers running."
                    } catch (err) {
                        echo "‚ùå Tests failed! Stopping servers..."
                        bat """
                            "${PM2_CMD}" delete django || echo "No Django process to delete"
                            "${PM2_CMD}" delete vue || echo "No Vue process to delete"
                        """
                        error("Django tests failed. Servers stopped.")
                    }
                 }
            }
        }

         stage('Merge fix into master and deploy') {
            when { 
                expression { env.BRANCH_NAME?.contains('fix') || env.GIT_BRANCH?.contains('fix') } 
            }
            steps {
                script {
                    if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {
                        withCredentials([
                            usernamePassword(credentialsId: 'github-creds', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN'),
                            string(credentialsId: 'github-email', variable: 'GIT_EMAIL')
                        ]) {
                            bat """
                                :: *** –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê GIT ***
                                git config --global --add safe.directory "C:\Users\User\Desktop\jenkins\tutor-ontrol_server"
                                
                                git config user.name "%GIT_USER%"
                                git config user.email "%GIT_EMAIL%"

                                :: *** 1. GIT-–û–ü–ï–†–ê–¶–ò–ò –í JENKINS WORKSPACE (–°–õ–ò–Ø–ù–ò–ï –ò PUSH –ù–ê GITHUB) ***
                                
                                git checkout master
                                git pull https://%GIT_USER%:%GIT_TOKEN%@github.com/Himatora/tutor-ontrol.git master
                                git merge origin/fix --no-ff
                                git push https://%GIT_USER%:%GIT_TOKEN%@github.com/Himatora/tutor-ontrol.git master

                                git checkout fix
                                git reset --hard master
                                git push --force https://%GIT_USER%:%GIT_TOKEN%@github.com/Himatora/tutor-ontrol.git fix

                                :: *** 2. –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ò –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–û–î–ê –í TARGET_DIR ***
                                
                                cd "${TARGET_DIR}"
                                
                                :: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Git –≤ —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
                                if not exist .git (
                                    git init
                                    git remote add origin https://%GIT_USER%:%GIT_TOKEN%@github.com/Himatora/tutor-ontrol.git
                                )

                                :: üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï #2: –°–∫–∞—á–∏–≤–∞–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π –∫–æ–¥ –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π master –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä!
                                git fetch
                                git checkout master
                                git pull https://%GIT_USER%:%GIT_TOKEN%@github.com/Himatora/tutor-ontrol.git master 

                                :: *** 3. PM2-–û–ü–ï–†–ê–¶–ò–ò (–ü–ï–†–ï–ó–ê–ü–£–°–ö) ***
                                
                                :: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Django
                                call "${PM2_CMD}" delete django || echo No Django process
                                call "${PM2_CMD}" start "${PYTHON_EXE}" --name django -- manage.py runserver 127.0.0.1:8000

                                :: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Vue
                                cd "${TARGET_DIR}\\client"
                                call "${PM2_CMD}" delete vue || echo No Vue process
                                call "${PM2_CMD}" start "${CMD}" --name vue -- /c "cd ${TARGET_DIR}\\client && npm run dev"
                            """
                        }
                    } else {
                        echo "Tests failed. Skipping merge and deployment."
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo "Deployment successful. Backend and Frontend are running via PM2 with the latest code!"
            echo "Backend: http://127.0.0.1:8000/"
            echo "Frontend: http://127.0.0.1:5173/"
        }
    }
}
