pipeline {
    agent any

    environment {
        CMD = 'C:\\Windows\\System32\\cmd.exe'
        PM2_CMD = 'C:\\Users\\User\\node_modules\\.bin\\pm2.cmd'
        PYTHON_EXE = 'C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python313\\python.exe'
        TARGET_DIR = 'C:\\Users\\User\\Desktop\\jenkins\\tutor-ontrol_server'
        GIT_REPO_URL = 'https://github.com/Himatora/tutor-ontrol.git'
    }

    triggers { 
        githubPush() 
    }

    stages {
        stage('Clean Workspace and Setup') {
            steps {
                bat """
                    echo "Cleaning workspace and setting up environment..."
                    cd "${TARGET_DIR}"
                    
                    echo "Current directory:"
                    cd
                    
                    echo "Git status before operations:"
                    git status || echo "Git not initialized"
                    
                    echo "PM2 processes before start:"
                    "${PM2_CMD}" list || echo "PM2 not running"
                    
                    echo "=== BRANCH DETECTION ==="
                    git branch --show-current
                    git log -1 --oneline
                """
            }
        }

        stage('Start Backend Server') {
            steps {
                bat """
                    cd "${TARGET_DIR}"

                    echo "Stopping existing Django processes..."
                    "${PM2_CMD}" delete django || echo "No existing Django process found"

                    echo "Starting Django server..."
                    "${PM2_CMD}" start "${PYTHON_EXE}" --name django -- manage.py runserver 127.0.0.1:8000
                    
                    echo "Checking if Django started..."
                    "${PM2_CMD}" list
                    timeout 10 || echo "Timeout check complete"
                """
            }
        }

        stage('Start Frontend Server') {
            steps {
                bat """
                    cd "${TARGET_DIR}\\client"

                    echo "Stopping existing Vue processes..."
                    "${PM2_CMD}" delete vue || echo "No existing Vue process found"

                    echo "Starting Vue development server..."
                    "${PM2_CMD}" start "${CMD}" --name vue -- /c "cd ${TARGET_DIR}\\client && npm run dev"

                    echo "Frontend started in background via PM2"
                    "${PM2_CMD}" list
                """
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    try {
                        echo "Running Django tests..."
                        bat """
                            cd "${TARGET_DIR}"
                            "${PYTHON_EXE}" manage.py test --verbosity=2
                        """
                        echo "✅ All Django tests passed! Keeping servers running."
                    } catch (err) {
                        echo "❌ Tests failed! Stopping servers..."
                        bat """
                            "${PM2_CMD}" delete django || echo "No Django process to delete"
                            "${PM2_CMD}" delete vue || echo "No Vue process to delete"
                        """
                        error("Django tests failed. Servers stopped.")
                    }
                 }
            }
        }

        stage('Check Branch and Merge') {
            steps {
                script {
                    // Определяем текущую ветку вручную
                    def CURRENT_BRANCH = bat(
                        script: '@cd "' + TARGET_DIR + '" && git branch --show-current',
                        returnStdout: true
                    ).trim()
                    
                    echo "Current branch detected: ${CURRENT_BRANCH}"
                    echo "Build result: ${currentBuild.result}"
                    
                    // Проверяем условия для мержа
                    if (CURRENT_BRANCH == 'fix' && (currentBuild.result == null || currentBuild.result == 'SUCCESS')) {
                        echo "✅ Conditions met for merge: branch=fix, build=success"
                        // Запускаем мерж как отдельный stage
                        build job: env.JOB_NAME, parameters: [
                            booleanParam(name: 'RUN_MERGE', value: true)
                        ], wait: false
                    } else {
                        echo "❌ Skip merge - conditions not met: branch=${CURRENT_BRANCH}, build=${currentBuild.result}"
                    }
                }
            }
        }

        stage('Merge fix into master') {
            when {
                expression { 
                    params.RUN_MERGE == true 
                }
            }
            steps {
                withCredentials([
                    usernamePassword(
                        credentialsId: 'github-creds', 
                        usernameVariable: 'GIT_USER', 
                        passwordVariable: 'GIT_TOKEN'
                    ),
                    string(
                        credentialsId: 'github-email', 
                        variable: 'GIT_EMAIL'
                    )
                ]) {
                    script {
                        try {
                            echo "=== STARTING MERGE OPERATIONS ==="
                            
                            bat """
                                cd "${TARGET_DIR}"
                                
                                echo "=== GIT CONFIGURATION ==="
                                git config user.name "%GIT_USER%"
                                git config user.email "%GIT_EMAIL%"
                                
                                echo "=== CURRENT BRANCH INFO ==="
                                git branch -a
                                git status
                                git remote -v
                                
                                echo "=== SETTING UP REMOTE URL WITH CREDENTIALS ==="
                                git remote set-url origin "https://%GIT_USER%:%GIT_TOKEN%@github.com/Himatora/tutor-ontrol.git"
                                
                                echo "=== FETCHING LATEST CHANGES ==="
                                git fetch --all
                                git pull origin fix
                                
                                echo "=== SWITCHING TO MASTER ==="
                                git checkout master
                                
                                echo "=== PULLING MASTER ==="
                                git pull origin master
                                
                                echo "=== MERGING FIX INTO MASTER ==="
                                git merge fix -m "Auto-merge from Jenkins build ${BUILD_NUMBER}"
                                
                                echo "=== PUSHING MASTER ==="
                                git push origin master
                                
                                echo "✅ Successfully merged fix into master"
                                
                                echo "=== SYNCING FIX BRANCH ==="
                                git checkout fix
                                git merge master -m "Sync fix with master after build ${BUILD_NUMBER}"
                                git push origin fix
                                
                                echo "✅ Successfully synced fix with master"
                                
                                echo "=== FINAL BRANCH STATUS ==="
                                git branch -v
                                git log --oneline -5
                            """
                        } catch (Exception e) {
                            echo "❌ Git operations failed: ${e.message}"
                            bat """
                                echo "=== GIT LOG FOR DEBUGGING ==="
                                git log --oneline -10
                                echo "=== GIT STATUS ==="
                                git status
                                echo "=== GIT REMOTE BRANCHES ==="
                                git branch -r
                            """
                            error("Git merge/push operations failed")
                        }
                    }
                }
            }
        }

        stage('Restart Servers After Merge') {
            when {
                expression { 
                    params.RUN_MERGE == true 
                }
            }
            steps {
                bat """
                    echo "=== RESTARTING SERVERS AFTER MERGE ==="
                    
                    echo "Stopping Django server..."
                    "${PM2_CMD}" delete django || echo "No Django process to stop"
                    
                    echo "Starting Django server..."
                    cd "${TARGET_DIR}"
                    "${PM2_CMD}" start "${PYTHON_EXE}" --name django -- manage.py runserver 127.0.0.1:8000
                    
                    echo "Stopping Vue server..."
                    "${PM2_CMD}" delete vue || echo "No Vue process to stop"
                    
                    echo "Starting Vue server..."
                    "${PM2_CMD}" start "${CMD}" --name vue -- /c "cd ${TARGET_DIR}\\client && npm run dev"
                    
                    echo "=== FINAL PM2 STATUS ==="
                    "${PM2_CMD}" list
                    
                    echo "✅ Servers restarted successfully after merge"
                """
            }
        }
    }

    post {
        always {
            echo "=== BUILD FINISHED ==="
            echo "Build Result: ${currentBuild.result}"
            bat """
                echo "Final PM2 status:"
                "${PM2_CMD}" list || echo "PM2 not available"
            """
        }
        success {
            echo "🎉 Pipeline executed successfully!"
            echo "Backend and Frontend are running via PM2!"
            echo "Backend: http://127.0.0.1:8000/"
            echo "Frontend: http://127.0.0.1:5173/"
            
            bat """
                echo "=== ACTIVE SERVERS ==="
                "${PM2_CMD}" list
                echo "=== NETSTAT FOR PORTS ==="
                netstat -an | findstr "8000" || echo "Port 8000 not found"
                netstat -an | findstr "5173" || echo "Port 5173 not found"
            """
        }
        failure {
            echo "❌ Pipeline failed!"
            bat """
                echo "=== CLEANING UP ON FAILURE ==="
                "${PM2_CMD}" delete django || echo "No Django process to delete"
                "${PM2_CMD}" delete vue || echo "No Vue process to delete"
                "${PM2_CMD}" list
            """
        }
        unstable {
            echo "⚠️ Pipeline unstable!"
        }
    }
}
