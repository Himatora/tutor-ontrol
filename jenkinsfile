pipeline {
    agent any

    environment {
        CMD = 'C:\\Windows\\System32\\cmd.exe'
        PM2_CMD = 'C:\\Users\\User\\node_modules\\.bin\\pm2.cmd'
        PYTHON_EXE = 'C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python313\\python.exe'
        SERVER_DIR = 'C:\\Users\\User\\Desktop\\jenkins\\tutor-ontrol_server'
        WORK_DIR = 'C:\\Users\\User\\Desktop\\jenkins\\tutor-ontrol'
    }

    triggers { 
        githubPush() 
    }

    stages {
        stage('Setup Git Safety') {
            steps {
                bat """
                    :: –î–æ–±–∞–≤–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è Git
                    git config --global --add safe.directory "C:/Users/User/Desktop/jenkins/tutor-ontrol"
                    git config --global --add safe.directory "C:/Users/User/Desktop/jenkins/tutor-ontrol_server"
                """
            }
        }

        stage('Pull Latest Changes') {
            steps {
                withCredentials([
                    usernamePassword(credentialsId: 'github-creds', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN'),
                    string(credentialsId: 'github-email', variable: 'GIT_EMAIL')
                ]) {
                    bat """
                        cd "${WORK_DIR}"
                        
                        :: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º git –¥–ª—è —ç—Ç–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                        git config user.name "%GIT_USER%"
                        git config user.email "%GIT_EMAIL%"
                        
                        :: –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        git fetch origin
                        git checkout fix
                        git reset --hard origin/fix
                        
                        echo "Changes pulled successfully from fix branch"
                        
                        :: –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã, –∏—Å–∫–ª—é—á–∞—è node_modules –∏ –¥—Ä—É–≥–∏–µ
                        robocopy "${WORK_DIR}" "${SERVER_DIR}" /E /XF package-lock.json /XD node_modules __pycache__ .git .vscode
                    """
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                bat """
                    :: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python
                    cd "${SERVER_DIR}"
                    "${PYTHON_EXE}" -m pip install -r requirements.txt

                    :: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
                    cd "${SERVER_DIR}\\client"
                    npm install
                """
            }
        }

        stage('Start Backend Server') {
            steps {
                bat """
                    cd "${SERVER_DIR}"

                    :: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
                    call "${PM2_CMD}" delete django || echo "No existing Django process"
                    timeout /t 3 /nobreak > nul

                    :: –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–∫–µ–Ω–¥
                    call "${PM2_CMD}" start "${PYTHON_EXE}" --name django -- manage.py runserver 127.0.0.1:8000
                    timeout /t 5 /nobreak > nul
                    
                    echo "Backend server started"
                """
            }
        }

        stage('Start Frontend Server') {
            steps {
                bat """
                    cd "${SERVER_DIR}\\client"

                    :: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
                    call "${PM2_CMD}" delete vue || echo "No existing Vue process"
                    timeout /t 3 /nobreak > nul

                    :: –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
                    call "${PM2_CMD}" start "${CMD}" --name vue -- /c "cd ${SERVER_DIR}\\client && npm run dev"
                    timeout /t 5 /nobreak > nul

                    echo "Frontend server started"
                """
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    try {
                        bat """
                            cd "${SERVER_DIR}"
                            "${PYTHON_EXE}" manage.py test --noinput
                        """
                        echo "‚úÖ All Django tests passed!"
                    } catch (err) {
                        echo "‚ùå Tests failed! Stopping servers..."
                        bat """
                            "${PM2_CMD}" delete django || echo "No Django process to delete"
                            "${PM2_CMD}" delete vue || echo "No Vue process to delete"
                        """
                        error("Django tests failed. Servers stopped.")
                    }
                 }
            }
        }

        stage('Merge and Sync Branches') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                withCredentials([
                    usernamePassword(credentialsId: 'github-creds', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN'),
                    string(credentialsId: 'github-email', variable: 'GIT_EMAIL')
                ]) {
                    bat """
                        cd "${WORK_DIR}"
                        
                        :: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º git
                        git config user.name "%GIT_USER%"
                        git config user.email "%GIT_EMAIL%"

                        :: –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ main –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
                        git checkout main
                        git pull origin main

                        :: –ú–µ—Ä–∂–∏–º fix –≤ main
                        git merge fix --no-ff -m "Merge fix branch [Jenkins Build: ${BUILD_NUMBER}]"

                        :: –ü—É—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        git push origin main

                        :: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º fix —Å main
                        git checkout fix
                        git merge main --no-edit
                        git push origin fix

                        echo "‚úÖ Branches merged and synced successfully"
                    """
                }
            }
        }

        stage('Final Restart') {
            steps {
                bat """
                    :: –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
                    cd "${SERVER_DIR}"
                    call "${PM2_CMD}" restart django || call "${PM2_CMD}" start "${PYTHON_EXE}" --name django -- manage.py runserver 127.0.0.1:8000
                    
                    cd "${SERVER_DIR}\\client"
                    call "${PM2_CMD}" restart vue || call "${PM2_CMD}" start "${CMD}" --name vue -- /c "cd ${SERVER_DIR}\\client && npm run dev"

                    echo "üöÄ Servers restarted with latest changes"
                """
            }
        }
    }

    post {
        success {
            echo "üéâ Pipeline completed successfully!"
            echo "üåê Backend: http://127.0.0.1:8000/"
            echo "üñ•Ô∏è Frontend: http://localhost:5173/"
            echo "üìù Changes merged to main and fix branches"
        }
        failure {
            echo "‚ùå Pipeline failed! Check the logs above."
            bat """
                "${PM2_CMD}" delete django || echo "No Django process"
                "${PM2_CMD}" delete vue || echo "No Vue process"
            """
        }
    }
}